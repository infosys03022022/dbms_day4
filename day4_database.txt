Create table patient(
patientid varchar2(5) primary key check(patientid like 'P%'),
pname varchar2(15) not null,
city varchar2(15)
);
Insert into patient values('P101','Kevin','New York');
Insert into patient values('P102','Merlin','Boston');
Insert into patient values('P103','Eliza','Chicago');
Insert into patient values('P104','Robert','New York');
Insert into patient values('P105','David','Chicago');
Create table doctor (
doctorid varchar2(5) primary key check(doctorid like 'D%'),
dname  VARCHAR2(20),
dept  VARCHAR2(20),
salary NUMBER);
Insert into doctor values ('D201','Jane', 'Cardiology', 150000);
Insert into doctor values ('D202','Maria', 'Nephrology', 110000);
Insert into doctor values ('D203','John', 'Cardiology', 160000);
Insert into doctor values ('D204','Jack', 'Neurology', 125000);
Create table consultation(
consultationid number primary key,
patientid varchar2(5) references patient(patientid),
doctorid varchar2(5) references doctor(doctorid),
fee number
);
Insert into consultation values(501,'P101','D204',500);
Insert into consultation values(502,'P102','D201',600);
Insert into consultation values(503,'P103','D202',450);
Insert into consultation values(504,'P104','D203',550);
Insert into consultation values(505,'P105','D203',550);
Insert into consultation values(506,'P101','D202',450);


Q Display the patient id and patient name who are from Chicago.
A SELECT patientid,pname
  FROM patient
  WHERE city='Chicago'

Q Display the patient id and patient name who are from Chicago and New York.
A SELECT patientid,pname
  FROM patient
  WHERE city IN ('Chicago','New York')
  OR
  SELECT patientid,pname
  FROM patient
  WHERE city='Chicago' OR city='New York'
Q count the number of patients. Give the alias name as count_of_patients.
  SELECT count(patientid) count_of_patients 
  FROM patient
Q count the number of patients citywise.
  SELECT city,count(patientid)
  FROM patient
  GROUP BY city
Q Count the number of doctors departmentwise.
  SELECT dept,count(doctorid)
  FROM doctor
  GROUP BY dept
Q Display the dept and count of doctors where count of doctors departmentwise are more than 1.
  SELECT dept,count(doctorid)
  FROM doctor
  GROUP BY dept
  HAVING count(doctorid)>1
Q Display the doctors id who had treated maximum patients. 
STEP 1  display the doctors id and count of patients
      
     SELECT doctorid,count(patientid)
       FROM consultation
       GROUP BY doctorid 
       HAVING count(patientid)=(SELECT MAX(count(patientid)) FROM consulation GROUP BY docotorid)

Q Display the doctor's name who had treated maximum patients.
    SELECT dname
    FROM doctor d JOIN consultation c
    ON d.doctorid=c.doctorid
    GROUP BY dname
    HAVING count(patientid)=(SELECT max(count(patientid)) FROM consulation GROUP BY doctorid)
       
      
---------------------------------------------------------------------------------------------
Q Display the doctor's id who had treated more than 1 patient.
A  SELECT doctorid
   FROM consultation
   GROUP BY doctorid
   HAVING count(patientid)>1

Q Display the doctor's name who had treated more than 1 patient.
  SELECT dname
  FROM doctor d INNER JOIN consultation c
  ON d.doctorid=c.doctorid
  GROUP BY dname
  HAVING count(patientid)>1
------------------------------------------------------------------------------------------------------------------------------------
Q Display the doctor's name from cardiology who had treated more than 1 patient.
[Hint: How many tables/table to use]
       How many columns to be displayed
       With WHERE clause ===> Cardiology
       With HAVING ======> count
   ]

    SELECT dname
    FROM doctor d INNER JOIN consultation c
    ON d.doctorid=c.doctorid
    WHERE dept='Cardiology'
    GROUP BY dname
    HAVING count(patientid)>1
----------------------------------------------------------------------------------------------------------------------------------

 


 SELECT max(sum(salary))
FROM employee
group by dept
-----------------------------------------------------------------------------------------------------------------------------------
customer
  custid  should start with C and primary key
  firstname   not null
  middlename  can be null
  lastname    not null
  city        not null
  state       not null
 
  CREATE TABLE customer(
   custid VARCHAR2(5),
   firstname VARCHAR2(30) NOT NULL,
   middlename VARCHAR2(30),
   lastname VARCHAR2(30) NOT NULL,
   city VARCHAR2(30) NOT NULL,
   state VARCHAR2(30) NOT NULL,
   CONSTRAINT customer_custid_pk PRIMARY KEY(custid),
   CONSTRAINT customer_custid_chk CHECK ( custid LIKE 'C%')
  )


  INSERT INTO customer VALUES('C0001','Suresh',NULL,'Chandra','Chennai','TN');
  INSERT INTO customer VALUES('C0002','Ravish','Kumar','Gupta','Patna','Bihar');
  INSERT INTO customer VALUES('C0003','Nitin',null,'Kumar','Gaya','Bihar');
  INSERT INTO customer VALUES('C0004','Arnab','Kumar','Dutta','Kolkata','WB');
  INSERT INTO customer VALUES('C0005','Jullie',null,'Desouza','Coimbatore','TN');
  INSERT INTO customer VALUES('C0006','Sangeet',null,'Madhavan','Chennai','TN');
  INSERT INTO customer VALUES('C0007','Dhiman',null,'Ganguly','Durgapur','WB');
  INSERT INTO customer VALUES('C0008','Natasha',null,'Daniel','Salem','TN');
  INSERT INTO customer VALUES('C0009','Asha','Rani','Gupta','Patna','Bihar');
  INSERT INTO customer VALUES('C0010','Mani','Kant','Sharma','Muzzafarpur','Bihar');
Q . Display firstname,middlename for all the customers.
Q . Display firstname for the customers from Tamilnadu.
Q . Display firstname for the customers who are not from Tamilnadu.
Q . Display the firstname,lastname for the customers who are not from Tamilnadu and West Bengal.
Q. Count the number of customers from Bihar. Give the alias name as Count of customer.
Q. Count the number of customers statewise.
Q. Count the number of customers statewise and citywise.
Q. Display the state from which we have maximum number of customers.
Q. Display the firstname of the customer who are having middlename as NULL.
Q. Display the first where name starts with A and followed by tha we have only 3 characters.
Q. Count the number of customers who don't have middlename.
Q. Display the state which is having the maximum number of customers.
Q. Display the state which is having the maximum number of customer and minimum number of customers.



  
item
  itemid should start with I and primary key
  desc       not null
  price      >0
  qoh        >0
  category   cosmetics,stationery,garments
  
 CREATE TABLE item(
   itemid VARCHAR2(5),
   desc VARCHAR2(20) NOT NULL,
   price INTEGER,
   qoh INTEGER,
   category VARCHAR2(20),
   CONSTRAINT item_itemid_pk PRIMARY KEY(itemid),
   CONSTRAINT item_price_chk CHECK ( price>0),
   CONSTRAINT item_qoh_chk CHECK (qoh>0),
   CONSTRAINT item_category_chk CHECK (category IN('Cosmetics','Stationery','Garments'))
   )


  INSERT INTO item VALUES('I0001','Pen',20.45,100,'Stationery');
  INSERT INTO item VALUES('I0002','Pencil',5.50,200,'Stationery');
  INSERT INTO item VALUES('I0003','Eraser',2.30,230,'Stationery');
  INSERT INTO item VALUES('I0004','Shirt',1000,400,'Garments');
  INSERT INTO item VALUES('I0005','T-Shirt',900,400,'Garments');
  INSERT INTO item VALUES('I0006','Perfume',600,400,'Cosmetics');
  INSERT INTO item VALUES('I0007','Kajal Pencil',15.56,200,'Cosmetics');

Q. Display the itemname which is having maximum price.
Q. Count the number of items categorywise.
Q. Display the category where the investement is highest.
Q. Display the item which is never purchased by any customer.
Q. Display the item which is transacted multiple times. 

purchase 
  tranid should start with T and primary key
  itemid FK
  custid FK 
  dop  default sysdate
  qtypur    >0


  CREATE TABLE purchase(
    tranid VARCHAR2(5),
    itemid VARCHAR2(5),
    custid VARCHAR2(5),
    dop DATE DEFAULT sysdate,
    qtypur INTEGER,
    CONSTRAINT purchase_tranid_pk PRIMARY KEY(tranid),
    CONSTRAINT purchase_tranid_chk CHECK ( tranid LIKE 'T%'),
    CONSTRAINT purchase_itemid_fk FOREIGN KEY(itemid) REFERENCES item(itemid),
    CONSTRAINT purchase_custid_fk FOREIGN KEY(custid) REFERENCES customer(custid),
    CONSTRAINT purchase_qtypur_chk CHECK (qtypur>0)  

  )

  INSERT INTO purchase VALUES('T0001','I0001','C0003','12-Jul-2010',20);
  INSERT INTO purchase VALUES('T0002','I0001','C0001','15-Aug-2015',20);
  INSERT INTO purchase VALUES('T0003','I0003','C0004','23-Jan-2020',30);
  INSERT INTO purchase VALUES('T0004','I0002','C0006','01-Feb-2016',10);
  INSERT INTO purchase VALUES('T0005','I0004','C0006','01-Feb-2016',10);
  INSERT INTO purchase VALUES('T0006','I0004','C0006','02-Jun-2020',30);

Q display the itemid,itemname for the items which were transacted in the month of February.
Q Display the itemid,itemname which were transacted between the year 2015 and 2020.(Inclusive)
Q Count the number of items transacted in the month of February.
Q Display the customer name whose transaction is most.
Q display itemid,itemname,customerid, customername and dop. Sort on date. 
Q display the customer name who purchased the item on today's date.
 
------------------------------------------------------------------------PRIMARY KEY--------------------------------------------------

CREATE TABLE student(
   roll INTEGER,
   name VARCHAR2(20),
   primary key(roll)
  )


CREATE TABLE student(
   roll INTEGER primary key,
   name VARCHAR2(20) NOT NULL
  )



CREATE TABLE student(
   roll INTEGER,
   name VARCHAR2(20) NOT NULL,
   CONSTRAINT student_roll_pk PRIMARY KEY(roll)
  )

-------------------------------------------------------FOREIGN KEY-----------------------------------------------------------------CREATE TABLE computer(
  compid VARCHAR2(5),
  model VARCHAR2(20) NOT NULL,
  CONSTRAINT computer_compid_pk PRIMARY KEY(compid)
) 
 


CREATE TABLE employee(
   id VARCHAR2(5) PRIMARY KEY,
   empname VARCHAR2(20) NOT NULL,
   desig VARCHAR2(20) NOT NULL,
   dept VARCHAR(20) NOT NULL,
   compid VARCHAR2(5),
   FOREIGN KEY(compid) REFERENCES computer(compid)
  )


CREATE TABLE employee(
   id VARCHAR2(5) PRIMARY KEY,
   empname VARCHAR2(20) NOT NULL,
   desig VARCHAR2(20) NOT NULL,
   dept VARCHAR(20) NOT NULL,
   compid VARCHAR2(5) REFERENCES computer(compid)
  )
  

  CREATE TABLE employee(
   id VARCHAR2(5) PRIMARY KEY,
   empname VARCHAR2(20) NOT NULL,
   desig VARCHAR2(20) NOT NULL,
   dept VARCHAR(20) NOT NULL,
   compid VARCHAR2(5),
   CONSTRAINT employee_id_fk FOREIGN KEY(compid) REFERENCES computer(compid)
  )
 ------------------------------------------------------------UNIQUE------------------------------------------------------------- 
CREATE TABLE employee(
   id VARCHAR2(5) primary key,
   email VARCHAR2(30) UNIQUE,
   name VARCHAR2(30) NOT NULL
  )


CREATE TABLE employee(
   id VARCHAR2(5) primary key,
   email VARCHAR2(30), 
   name VARCHAR2(30) NOT NULL
   UNIQUE (email)  
)


CREATE TABLE employee(
   id VARCHAR2(5) primary key,
   email VARCHAR2(30), 
   name VARCHAR2(30) NOT NULL,
   CONSTRAINT employee_id_unq UNIQUE(email)
)


------------------------------------------------------------- CHECK ---------------------------------------------------------------


    CREATE TABLE employee(
   id VARCHAR2(5) primary key,
    name VARCHAR2(30) NOT NULL,
   desig VARCHAR2(20) CHECK (desig IN('Mgr','AsstMgr','Clerk')
   
)

CREATE TABLE employee(
   id VARCHAR2(5) primary key,
    name VARCHAR2(30) NOT NULL,
   desig VARCHAR2(2) 
   CHECK (desig IN('Mgr','AsstMgr','Clerk')
   )



CREATE TABLE employee(
   id VARCHAR2(5) primary key,
    name VARCHAR2(30) NOT NULL,
   desig VARCHAR2(2), 
   CONSTRAINT employee_desig_chk CHECK (desig IN('Mgr','AsstMgr','Clerk')
   )
--------------------------------------------------------------------------------------------------------------------------------
Composite primary key

    CREATE TABLE result(
    studentid VARCHAR(5),
    courseid  VARCHAR(5),
    marks INTEGER,
    CONSTRAINT result_student_id_course_id_pk PRIMARY KEY(studentid,courseid)
    )


CONSTRAINTS:-

* Primary Key
* Foreign Key
* Check
* NOT NULL
* UNIQUE

------------------------------------------------------------------------------------------------------------------------------


